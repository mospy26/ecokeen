package com.ecokeen.backend.api;

import java.util.List;
import java.util.UUID;

import com.ecokeen.backend.crudRepositories.UserRepository;
import com.ecokeen.backend.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.lang.NonNull;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RequestMapping("api/v1/users")
@RestController
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/login")
    public @ResponseBody Integer login(@RequestParam String email,
                                      @RequestParam String password) {
        // result = SELECT * FROM users WHERE password = password AND email = email
        // if result.length = 0, return null else return
        return 0;
    }

    @PostMapping(path="/register") // Map ONLY POST Requests
    public @ResponseBody Boolean addNewUser (@RequestParam String name
            , @RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        // Check if user exists in the database if not then add else send

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);
        userRepository.save(n);
        return true;
    }

    @GetMapping(path="/footprint/average/{id}")
    public @ResponseBody Integer getAverageFootprint (@PathVariable("id") Integer id) {
        // x = SELECT footprint FROM groceries WHERE User.id = id
        // y = SELECT footprint FROM travel WHERE User.id = id
        // return x+y
        return id;
    }

    @GetMapping(path="/footprint/best/{id}/")
    public @ResponseBody Integer getBestFootprint (@PathVariable("id") Integer id) {
        // x = SELECT MIN(footprint) FROM groceries WHERE User.id = id
        // y = SELECT MIN(footprint) FROM travel WHERE User.id = id
        // return min(x,y)
        return id;
    }

    @GetMapping(path="/footprint/worst/{id}/")
    public @ResponseBody Integer getWorseFootprint (@PathVariable("id") Integer id) {
        // x = SELECT max(footprint) FROM groceries WHERE User.id = id
        // y = SELECT max(footprint) FROM travel WHERE User.id = id
        // return max(x,y)
        return id;
    }

    @GetMapping(path="/footprint/all/{id}")
    public @ResponseBody String getLastTenDaysFootprint (@PathVariable("id") Integer id) {
        // SELECT values FROM users BETWEEN CURDATE() - 10 AND CURDATE()
        return "hello";
    }

    // --------- TEST PURPOSES -----------------
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

}