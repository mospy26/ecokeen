package com.ecokeen.backend.api;

import java.util.List;
import java.util.UUID;

import com.ecokeen.backend.crudRepositories.SecureUserRepository;
import com.ecokeen.backend.dao.UserDAO;
import com.ecokeen.backend.model.User;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.lang.NonNull;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RequestMapping("api/v1/users")
@RestController
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SecureUserRepository secureUserRepository;

    @Autowired
    private UserDAO userDAO;

    ObjectMapper objectMapper = new ObjectMapper();

    @PostMapping(path = "/register")
    public @ResponseBody String addNewUser(@RequestBody User user) {

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if (userDAO.register(user.getName(), user.getEmail(), user.getPassword())) {
            return "Saved";
        }
        return "Error";
    }

    @PostMapping(path = "/authenticate") // Map ONLY POST Requests
    public String authenticateUser(@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            String token;
            token = userDAO.authenticate(user.getEmail(), user.getPassword());
            return token;
        } catch (Exception e) {
            e.printStackTrace();
            return e.getMessage();
        }
   }
//
//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return secureUserRepository.findAll();
//    }
//
//    @Autowired
//    public PersonController(PersonService personService) {
//        this.personService = personService;
//    }
//
//    @PostMapping
//    public void addPerson(@Validated @NonNull @RequestBody Person person) {
//        personService.addPerson(person);
//    }
//
//    @GetMapping
//    public List<Person> getAllPeople() {
//        return personService.getAllPeople();
//    }
//
//    @GetMapping(path = "{id}")
//    public Person getPersonByID(@PathVariable("id") UUID id) {
//        return personService.getPersonById(id).orElse(null);
//    }
//
//    @DeleteMapping(path = "{id}")
//    public void deletePersonById(@PathVariable("id") UUID id) {
//        personService.deletePerson(id);
//    }
//
//    @PutMapping(path = "{id}")
//    public void updatePerson(@PathVariable("id") UUID id, @Validated @NonNull @RequestBody Person personToUpdate) {
//        personService.updatePerson(id, personToUpdate);
//    }

}